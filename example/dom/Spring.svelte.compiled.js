/* ./Spring.svelte generated by Svelte v__VERSION__ */
import {
	SvelteComponent,
	append,
	attr,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	listen,
	mount_component,
	run_all,
	safe_not_equal,
	set_data,
	set_input_value,
	set_style,
	space,
	svg_element,
	text,
	to_number,
	transition_in,
	transition_out
} from "https://esm.sh/svelte/internal";

import { spring } from "../../src/runtime/motion/spring.ts";
import Inner from "./Inner.svelte.compiled.js";

function add_css() {
	var style = element("style");
	style.id = "svelte-lnethc-style";
	style.textContent = "svg.svelte-lnethc{width:100%;height:100%;margin:-8px}circle.svelte-lnethc{fill:#ff3e00}.container.svelte-lnethc{width:98vw;height:98vh}";
	append(document.head, style);
}

function create_fragment(ctx) {
	let div1;
	let div0;
	let label0;
	let h30;
	let t0;
	let t1_value = /*coords*/ ctx[0].stiffness + "";
	let t1;
	let t2;
	let t3;
	let input0;
	let t4;
	let label1;
	let h31;
	let t5;
	let t6_value = /*coords*/ ctx[0].damping + "";
	let t6;
	let t7;
	let t8;
	let input1;
	let t9;
	let svg;
	let circle;
	let circle_cx_value;
	let circle_cy_value;
	let t10;
	let inner;
	let current;
	let mounted;
	let dispose;
	inner = new Inner({});

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			label0 = element("label");
			h30 = element("h3");
			t0 = text("stiffness (");
			t1 = text(t1_value);
			t2 = text(")");
			t3 = space();
			input0 = element("input");
			t4 = space();
			label1 = element("label");
			h31 = element("h3");
			t5 = text("damping (");
			t6 = text(t6_value);
			t7 = text(")");
			t8 = space();
			input1 = element("input");
			t9 = space();
			svg = svg_element("svg");
			circle = svg_element("circle");
			t10 = space();
			create_component(inner.$$.fragment);
			attr(input0, "type", "range");
			attr(input0, "min", "0");
			attr(input0, "max", "1");
			attr(input0, "step", "0.01");
			attr(input1, "type", "range");
			attr(input1, "min", "0");
			attr(input1, "max", "1");
			attr(input1, "step", "0.01");
			set_style(div0, "position", "absolute");
			set_style(div0, "right", "1em");
			attr(circle, "cx", circle_cx_value = /*$coords*/ ctx[1].x);
			attr(circle, "cy", circle_cy_value = /*$coords*/ ctx[1].y);
			attr(circle, "r", /*$size*/ ctx[2]);
			attr(circle, "class", "svelte-lnethc");
			attr(svg, "class", "svelte-lnethc");
			attr(div1, "class", "container svelte-lnethc");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, label0);
			append(label0, h30);
			append(h30, t0);
			append(h30, t1);
			append(h30, t2);
			append(label0, t3);
			append(label0, input0);
			set_input_value(input0, /*coords*/ ctx[0].stiffness);
			append(div0, t4);
			append(div0, label1);
			append(label1, h31);
			append(h31, t5);
			append(h31, t6);
			append(h31, t7);
			append(label1, t8);
			append(label1, input1);
			set_input_value(input1, /*coords*/ ctx[0].damping);
			append(div1, t9);
			append(div1, svg);
			append(svg, circle);
			append(div1, t10);
			mount_component(inner, div1, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input0, "change", /*input0_change_input_handler*/ ctx[4]),
					listen(input0, "input", /*input0_change_input_handler*/ ctx[4]),
					listen(input1, "change", /*input1_change_input_handler*/ ctx[5]),
					listen(input1, "input", /*input1_change_input_handler*/ ctx[5]),
					listen(svg, "mousemove", /*mousemove_handler*/ ctx[6]),
					listen(svg, "mousedown", /*mousedown_handler*/ ctx[7]),
					listen(svg, "mouseup", /*mouseup_handler*/ ctx[8])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if ((!current || dirty & /*coords*/ 1) && t1_value !== (t1_value = /*coords*/ ctx[0].stiffness + "")) set_data(t1, t1_value);

			if (dirty & /*coords*/ 1) {
				set_input_value(input0, /*coords*/ ctx[0].stiffness);
			}

			if ((!current || dirty & /*coords*/ 1) && t6_value !== (t6_value = /*coords*/ ctx[0].damping + "")) set_data(t6, t6_value);

			if (dirty & /*coords*/ 1) {
				set_input_value(input1, /*coords*/ ctx[0].damping);
			}

			if (!current || dirty & /*$coords*/ 2 && circle_cx_value !== (circle_cx_value = /*$coords*/ ctx[1].x)) {
				attr(circle, "cx", circle_cx_value);
			}

			if (!current || dirty & /*$coords*/ 2 && circle_cy_value !== (circle_cy_value = /*$coords*/ ctx[1].y)) {
				attr(circle, "cy", circle_cy_value);
			}

			if (!current || dirty & /*$size*/ 4) {
				attr(circle, "r", /*$size*/ ctx[2]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(inner.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(inner.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(inner);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $coords;
	let $size;
	let coords = spring({ x: 50, y: 50 }, { stiffness: 0.1, damping: 0.25 });
	component_subscribe($$self, coords, value => $$invalidate(1, $coords = value));
	let size = spring(10);
	component_subscribe($$self, size, value => $$invalidate(2, $size = value));

	function input0_change_input_handler() {
		coords.stiffness = to_number(this.value);
		$$invalidate(0, coords);
	}

	function input1_change_input_handler() {
		coords.damping = to_number(this.value);
		$$invalidate(0, coords);
	}

	const mousemove_handler = e => coords.set({ x: e.clientX, y: e.clientY });
	const mousedown_handler = () => size.set(30);
	const mouseup_handler = () => size.set(10);

	return [
		coords,
		$coords,
		$size,
		size,
		input0_change_input_handler,
		input1_change_input_handler,
		mousemove_handler,
		mousedown_handler,
		mouseup_handler
	];
}

class Example extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-lnethc-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Example;